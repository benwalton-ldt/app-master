
COMMAND TO SEE LIVE AND DEAD TUPLES IN DATABASE
================================================
SELECT 
    schemaname
    ,relname
    ,n_live_tup
    ,n_dead_tup
    ,last_autovacuum
FROM pg_stat_all_tables
ORDER BY n_dead_tup
    /(n_live_tup
      * current_setting('autovacuum_vacuum_scale_factor')::float8
      + current_setting('autovacuum_vacuum_threshold')::float8)
     DESC
	 
LINUX BASH SHELL SCRIPT FOR DATA MIGRATION BETWEEN POSTGRESQL SERVERS:
=======================================================================
#!/bin/bash
psql \
    -X \
    -U user_name \
    -h host_name1 \
    -d database_name \
    -c "\\copy tbl_Students to stdout" \
| \
psql \
    -X \
    -U user_name \
    -h host_name2 \
    -d database_name \
    -c "\\copy tbl_Students from stdin"
	
SHELL SCRIPT TO STORE PSQL SELECT OUTPUT INTO VARIABLE
========================================================
#!/bin/bash
 
DB_NAME=$1
RecordCount1=$( psql -d ${DB_NAME} -c "select count(1) from tbl_students" )
RecordCount2=$( psql -d ${DB_NAME} -t -c "select count(1) from tbl_students" )
 
echo "RecordCount1:"$RecordCount1
echo "RecordCount2:"$RecordCount2

POSTGRESQL: USE PG_DUMP | SSH | PSQL, COPY TABLE DATA FROM A SERVER TO ANOTHER SERVER
======================================================================================
Option #1: Using SSH | PSQL
Use pg_dump with SSH | PSQL, and execute below command. It will ask password for pgtest2.dbrnd.com, and I set database password using variable PGPASSWORD. 
It will migrate only table data between server.

1
pg_dump --data-only --table=public.tbl_stud Students | ssh anvesh@pgtest2.dbrnd.com "PGPASSWORD=mypass psql -h pgtest2.dbrnd.com -U anvesh Students_test"
Option #2: Using only PSQL (Transfer data only)
Option -a is for data only.

1
pg_dump -t public.tbl_stud -a Students | psql -h pgtest2.dbrnd.com -p 5432 -d Students_test
Option #3: Using only PSQL (Transfer table structure with data)

1
pg_dump -t public.tbl_stud Students | psql -h pgtest2.dbrnd.com -p 5432 -d Students_test

SCRIPT TO FIND ALL OBJECTS OF A PARTICULAR USE
===============================================
select 
    nsp.nspname as SchemaName
    ,cls.relname as ObjectName 
    ,rol.rolname as ObjectOwner
    ,case cls.relkind
        when 'r' then 'TABLE'
        when 'm' then 'MATERIALIZED_VIEW'
        when 'i' then 'INDEX'
        when 'S' then 'SEQUENCE'
        when 'v' then 'VIEW'
        when 'c' then 'TYPE'
        else cls.relkind::text
    end as ObjectType
from pg_class cls
join pg_roles rol 
	on rol.oid = cls.relowner
join pg_namespace nsp 
	on nsp.oid = cls.relnamespace
where nsp.nspname not in ('information_schema', 'pg_catalog')
    and nsp.nspname not like 'pg_toast%'
    and rol.rolname = 'postgres'  
order by nsp.nspname, cls.relname

HOW TO GET THE LIST OF ALL PRIVILEGES OF A DATABASE IN PSQL?
=============================================================
How to connect the database in PSQL?

-psql>\connect database_name
Get the list of databases:

-psql> \list 
or 
-psql> \l
Get the list of privileges:

-psql> \du


 SCRIPT TO CHECK THE STATUS OF SHARED BUFFER (USE PG_BUFFERCACHE)
 ================================================================
 
 Please check the below script and output:

Create pg_buffercache module:

CREATE EXTENSION pg_buffercache;
Script to check the status of Shared Buffer:

SELECT 
    c.relname, 
    count(*) AS buffers
FROM pg_buffercache b 
INNER JOIN pg_class c
   ON b.relfilenode = pg_relation_filenode(c.oid) 
    	AND b.reldatabase IN (0, (SELECT oid FROM pg_database
WHERE datname = current_database()))
GROUP BY c.relname
ORDER BY 2 DESC;

SCRIPT TO CHECK THE STATUS OF AUTOVACUUM FOR ALL TABLES
========================================================
SELECT 
    schemaname
    ,relname
    ,n_live_tup
    ,n_dead_tup
    ,last_autovacuum
FROM pg_stat_all_tables
ORDER BY n_dead_tup
    /(n_live_tup
      * current_setting('autovacuum_vacuum_scale_factor')::float8
      + current_setting('autovacuum_vacuum_threshold')::float8)
     DESC;
	 
FIND A LIST OF ACTIVE TEMP TABLES WITH SIZE AND USER INFORMATION
=================================================================
SELECT
	n.nspname as SchemaName
	,c.relname as RelationName
	,CASE c.relkind
	WHEN 'r' THEN 'table'
	WHEN 'v' THEN 'view'
	WHEN 'i' THEN 'index'
	WHEN 'S' THEN 'sequence'
	WHEN 's' THEN 'special'
	END as RelationType
	,pg_catalog.pg_get_userbyid(c.relowner) as RelationOwner               
	,pg_size_pretty(pg_relation_size(n.nspname ||'.'|| c.relname)) as RelationSize
FROM pg_catalog.pg_class c
LEFT JOIN pg_catalog.pg_namespace n               
                ON n.oid = c.relnamespace
WHERE  c.relkind IN ('r','s') 
AND  (n.nspname !~ '^pg_toast' and nspname like 'pg_temp%')
ORDER BY pg_relation_size(n.nspname ||'.'|| c.relname) DESC;

SCRIPT TO FIND THE COUNT OF OBJECTS FOR EACH DATABASE SCHEMA
=============================================================
SELECT
	n.nspname as schema_name
	,CASE c.relkind
	   WHEN 'r' THEN 'table'
	   WHEN 'v' THEN 'view'
	   WHEN 'i' THEN 'index'
	   WHEN 'S' THEN 'sequence'
	   WHEN 's' THEN 'special'
	END as object_type
	,count(1) as object_count
FROM pg_catalog.pg_class c
LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relkind IN ('r','v','i','S','s')
GROUP BY  n.nspname,
	CASE c.relkind
	   WHEN 'r' THEN 'table'
	   WHEN 'v' THEN 'view'
	   WHEN 'i' THEN 'index'
	   WHEN 'S' THEN 'sequence'
	   WHEN 's' THEN 'special'
	END
ORDER BY n.nspname,
	CASE c.relkind
	   WHEN 'r' THEN 'table'
	   WHEN 'v' THEN 'view'
	   WHEN 'i' THEN 'index'
	   WHEN 'S' THEN 'sequence'
	   WHEN 's' THEN 'special'
	END;

SCRIPT TO FIND ORPHANED SEQUENCE, NOT OWNED BY ANY COLUMN
==========================================================
SELECT 
	ns.nspname AS SchemaName
	,c.relname AS SequenceName
FROM pg_class AS c
JOIN pg_namespace AS ns 
	ON c.relnamespace=ns.oid
WHERE c.relkind = 'S'
  AND NOT EXISTS (SELECT * FROM pg_depend WHERE objid=c.oid AND deptype='a')
ORDER BY c.relname;

SHELL SCRIPT TO COPY TABLE DATA FROM ONE SERVER TO ANOTHER SERVER
==================================================================
#!/bin/bash
psql \
    -X \
    -U user_name \
    -h host_name1 \
    -d database_name \
    -c "\\copy tbl_Students to stdout" \
| \
psql \
    -X \
    -U user_name \
    -h host_name2 \
    -d database_name \
    -c "\\copy tbl_Students from stdin"
	
You can also filter the column list something like below script:

#!/bin/bash
psql \
    -X \
    -U user_name \
    -h host_name1 \
    -d database_name \
    -c "\\copy (SELECT Rno, Studname FROM tbl_Students) to stdout" \
| \
psql \
    -X \
    -U user_name \
    -h host_name2 \
    -d database_name \
    -c "\\copy tbl_Students from stdin"
	
CRIPT TO COPY TABLE DATA FROM ONE SCHEMA TO ANOTHER SCHEMA
===========================================================
CREATE OR REPLACE FUNCTION fn_CopySchemaData(source_schema text, dest_schema text) 
RETURNS void AS
$$
 
DECLARE
  object text;
  buffer text;
  default_ text;
  column_ text;
BEGIN
 
	-- Create a new schema
	EXECUTE 'CREATE SCHEMA ' || dest_schema; 
  
FOR object IN
	SELECT sequence_name::text 
	FROM information_schema.SEQUENCES 
	WHERE sequence_schema = source_schema
LOOP
	EXECUTE 'CREATE SEQUENCE ' || dest_schema || '.' || object;
END LOOP;
 
FOR object IN
	SELECT TABLE_NAME::text 
	FROM information_schema.TABLES 
	WHERE table_schema = source_schema
LOOP
	buffer := dest_schema || '.' || object;
	EXECUTE 'CREATE TABLE ' || buffer || ' (LIKE ' || source_schema || '.' || object || ' INCLUDING CONSTRAINTS INCLUDING INDEXES INCLUDING DEFAULTS)';
 
	FOR column_, default_ IN
		SELECT column_name::text, REPLACE(column_default::text, source_schema, dest_schema) 
		FROM information_schema.COLUMNS 
		WHERE table_schema = dest_schema 
			AND TABLE_NAME = object 
			AND column_default LIKE 'nextval(%' || source_schema || '%::regclass)'
	LOOP
	EXECUTE 'ALTER TABLE ' || buffer || ' ALTER COLUMN ' || column_ || ' SET DEFAULT ' || default_;
	END LOOP;
END LOOP;
 
END;
 
$$ LANGUAGE plpgsql VOLATILE;

SCRIPT TO SEARCH ANY TEXT FROM THE STORED FUNCTION
===================================================

Using pg_proc:

select 
	proname AS FunctionName	
from pg_proc where prosrc like '%Your_Text%';
Using information_schema.routines:=============

select 
	routine_catalog AS DatabaseName
	,routine_schema AS SchemaName
	,routine_name AS FunctionName
	,routine_type AS ObjectType
from information_schema.routines 
where routine_definition like '%Your_Text%'

SCRIPT TO FIND VERSION AND RELEASE INFORMATION
===============================================

SELECT VERSION();
 
/* Sample Result:
version
--------------------------------------------------------------------------
PostgreSQL 9.5.3, compiled by Visual C++ build 1800, 32-bit
*/
Get only PostgreSQL Version:

SHOW SERVER_VERSION;
 
/*Sample Result:
server_version
-----------------------
9.5.3
*/
Get PostgreSQL Version Number:

SELECT current_setting('server_version_num');
 
/* Sample Result:
current_setting
-------------------------
90503
*/

SCRIPT TO FIND SIZE OF ALL DATABASES OF SERVER
==============================================
SELECT 
	datname AS DatabaseName
	,pg_catalog.pg_get_userbyid(datdba) AS OwnerName
	,CASE 
		WHEN pg_catalog.has_database_privilege(datname, 'CONNECT')
		THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(datname))
		ELSE 'No Access For You'
	END AS DatabaseSize
FROM pg_catalog.pg_database
ORDER BY 
	CASE 
		WHEN pg_catalog.has_database_privilege(datname, 'CONNECT')
		THEN pg_catalog.pg_database_size(datname)
		ELSE NULL
	END DESC;
	
SCRIPT TO FIND INDEX SIZE AND INDEX USAGE STATISTICS
=====================================================
SELECT
    pt.tablename AS TableName
    ,t.indexname AS IndexName
    ,pc.reltuples AS TotalRows
    ,pg_size_pretty(pg_relation_size(quote_ident(pt.tablename)::text)) AS TableSize
    ,pg_size_pretty(pg_relation_size(quote_ident(t.indexrelname)::text)) AS IndexSize
    ,t.idx_scan AS TotalNumberOfScan
    ,t.idx_tup_read AS TotalTupleRead
    ,t.idx_tup_fetch AS TotalTupleFetched
FROM pg_tables AS pt
LEFT OUTER JOIN pg_class AS pc 
	ON pt.tablename=pc.relname
LEFT OUTER JOIN
( 
	SELECT 
		pc.relname AS TableName
		,pc2.relname AS IndexName
		,psai.idx_scan
		,psai.idx_tup_read
		,psai.idx_tup_fetch
		,psai.indexrelname 
	FROM pg_index AS pi
	JOIN pg_class AS pc 
		ON pc.oid = pi.indrelid
	JOIN pg_class AS pc2 
		ON pc2.oid = pi.indexrelid
	JOIN pg_stat_all_indexes AS psai 
		ON pi.indexrelid = psai.indexrelid 
)AS T
    ON pt.tablename = T.TableName
WHERE pt.schemaname='public'
ORDER BY 1;

 HOW TO CHECK TABLE FRAGMENTATION USING PGSTATTUPLE MODULE
 ==========================================================
 Load pgstattuple module:
1
CREATE EXTENSION pgstattuple;
Create one sample table:
CREATE TABLE tbl_ItemTransactions

 (
     TranID SERIAL
     ,TransactionDate TIMESTAMPTZ
     ,TransactionName TEXT
 );
Insert few millions of data:

INSERT INTO tbl_ItemTransactions 
(TransactionDate, TransactionName)
SELECT x, 'dbrnd' 
FROM generate_series('2014-01-01 00:00:00'::timestamptz, '2016-08-01 00:00:00'::timestamptz,'2 seconds'::interval) a(x);
Check the tuple information using pgstattuple:
1
SELECT *FROM pgstattuple('public.tbl_itemtransactions');
The Result:
table_len          | 2125627392
tuple_count        | 40737601
tuple_len          | 1873929646
tuple_percent      | 88.16
dead_tuple_count   | 45
dead_tuple_len     | 7787
dead_tuple_percent | 0.88
free_space         | 9923
free_percent       | 1.96

SCRIPT TO FIND TOTAL LIVE TUPLES AND DEAD TUPLES (ROW) OF A TABLE
==================================================================
Using system function and pg_class:
------------------------------------
SELECT 
	relname AS ObjectName
	,pg_stat_get_live_tuples(c.oid) AS LiveTuples
	,pg_stat_get_dead_tuples(c.oid) AS DeadTuples
FROM pg_class c;

Using pg_stat_user_tables:
--------------------------
SELECT 
	relname AS TableName
	,n_live_tup AS LiveTuples
	,n_dead_tup AS DeadTuples
FROM pg_stat_user_tables;

SCRIPT TO FIND TOP 10 LONG RUNNING QUERIES USING PG_STAT_STATEMENTS
===================================================================
SELECT 
	pd.datname
	,pss.query AS SQLQuery
	,pss.rows AS TotalRowCount
	,(pss.total_time / 1000 / 60) AS TotalMinute 
	,((pss.total_time / 1000 / 60)/calls) as TotalAverageTime		
FROM pg_stat_statements AS pss
INNER JOIN pg_database AS pd
	ON pss.dbid=pd.oid
ORDER BY 1 DESC 
LIMIT 10;

SCRIPT TO KILL ALL IDLE SESSIONS AND CONNECTIONS OF A DATABASE
===============================================================
SELECT pg_terminate_backend(pid)
FROM pg_stat_activity
WHERE datname = 'Database_Name'
	AND pid <> pg_backend_pid()
	AND state in ('idle', 'idle in transaction', 'idle in transaction (aborted)', 'disabled') 
	AND state_change < current_timestamp - INTERVAL '15' MINUTE;
	
SCRIPT TO CHECK A FILLFACTOR VALUE FOR TABLES AND INDEXES
==========================================================
SELECT 
	pc.relname AS ObjectName 
       ,pc.reloptions AS ObjectOptions
FROM pg_class AS pc
INNER JOIN pg_namespace AS pns 
	ON pns.oid = pc.relnamespace
WHERE pns.nspname = 'public'
	AND pc.relname = 'Table_Name';
	
IMPORTANT PARAMETERS TO ENABLE LOG FOR ALL QUERIES
===================================================
log_directory = ‘pg_log’ (default directory name)
log_filename = ‘postgresql-%Y-%m-%d_%H%M%S.log’ (default file name structure)
log_statement = ‘all’ (value ‘all’ is recommended {none, ddl, mod, all})
logging_collector = ON
log_line_prefix = ‘%t %c %u ‘ (time, sessionid, user)
log_destination = ON (stderr,syslog,csvlog,eventlog)
log_rotation_size = 15MB
log_rotation_age = 1d (create new log file every day)

FUNCTION TO TRUNCATE ALL TABLES CREATED BY PARTICULAR USER
============================================================
CREATE OR REPLACE FUNCTION fn_TruncateAllTable
(
	InputUserName CHARACTER VARYING 
	,InputSchemaName CHARACTER VARYING 
) RETURNS void AS $$
DECLARE
	statements CURSOR FOR
	SELECT tablename FROM pg_tables
	WHERE tableowner = InputUserName AND schemaname = InputSchemaName;
BEGIN
    FOR stmt IN statements LOOP
	EXECUTE 'TRUNCATE TABLE ' || quote_ident(stmt.tablename) || ' CASCADE;';	
    END LOOP;
END;
$$ LANGUAGE plpgsql;

SCRIPT TO CREATE A READ-ONLY DATABASE USER
=============================================

Create the Read-Only user:

CREATE ROLE Read_Only_User WITH LOGIN PASSWORD 'Test1234' 
NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION VALID UNTIL 'infinity';

Assign permissions to the read only user:

GRANT CONNECT ON DATABASE YourDatabaseName TO Read_Only_User;
GRANT USAGE ON SCHEMA public TO Read_Only_User;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO Read_Only_User;
GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO Read_Only_User;

SCRIPT TO FIND SOURCE AND DESTINATION OF ALL FOREIGN KEY CONSTRAINT
=====================================================================
SELECT
	tc.constraint_name AS ForeignKeyConstraintName
	,tc.table_name AS TableName
	,kcu.column_name AS ColumnName
	,ccu.table_name AS ForeignKeyTableName
	,ccu.column_name AS ForeignKeyColumn
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
	ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
	ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'; 

SCRIPT TO FIND A MISSING INDEXES OF THE SCHEMA
===============================================
SELECT 
	relname AS TableName
	,seq_scan-idx_scan AS TotalSeqScan
	,CASE WHEN seq_scan-idx_scan > 0 
		THEN 'Missing Index Found' 
		ELSE 'Missing Index Not Found' 
	END AS MissingIndex
	,pg_size_pretty(pg_relation_size(relname::regclass)) AS TableSize
	,idx_scan AS TotalIndexScan
FROM pg_stat_all_tables
WHERE schemaname='public'
	AND pg_relation_size(relname::regclass)>100000 
ORDER BY 2 DESC;

SCRIPT TO FIND THE UNUSED AND DUPLICATE INDEX
==============================================

Script to find the unused indexes in PostgreSQL:==

SELECT
	PSUI.indexrelid::regclass AS IndexName
	,PSUI.relid::regclass AS TableName
FROM pg_stat_user_indexes AS PSUI    
JOIN pg_index AS PI 
    ON PSUI.IndexRelid = PI.IndexRelid
WHERE PSUI.idx_scan = 0 
	AND PI.indisunique IS FALSE;
	
Script to find the duplicate indexes in PostgreSQL:==

SELECT
    indrelid::regclass AS TableName
    ,array_agg(indexrelid::regclass) AS Indexes
FROM pg_index 
GROUP BY 
    indrelid
    ,indkey 
HAVING COUNT(*) > 1;

IMPORTANT DATABASE ADMINISTRATOR COMMANDS
==========================================
Below are the important PSQL command:

# \l : to list all databases
# \? : to list help for all commands
# \h create table : show help with topics
# \d : to list all tables
# \df : to list all functions
# \da : to list all aggregate functions
# \dn : to list all schemas
# \du : to list all users
# \r : to reset the query buffer
# \db : to list all table space


MPORTANT DATABASE ADMINISTRATOR COMMANDS
=======================================
Check the version of PostgreSQL:

SELECT version();
Create a database using the script:

CREATE DATABASE Database_Name WITH OWNER User_Name;
Change the owner of the database:

ALTER DATABASE Database_Name OWNER TO User_Name;
Create a full copy of the database with structure and data:

CREATE DATABASE NewDB WITH TEMPLATE OldDB;
Create a database User using the script:

CREATE USER Anvesh WITH password 'testPassword';
Change the password of the User:

ALTER USER postgres WITH PASSWORD 'temproot';
Upgrade the existing User to Superuser:

ALTER USER TestUser WITH SUPERUSER;
Reload the PostgreSQL configuration file:

SELECT  pg_reload_conf();
Rotate the PostgreSQL Log file:

SELECT pg_rotate_logfile();
Find the Postgres server start time:

SELECT pg_postmaster_start_time();

SCRIPT TO FIND WHICH GROUP ROLES ARE GRANTED TO THE USER
=========================================================

SELECT 
	pg_get_userbyid(roleid) AS GroupRoleName
	,pg_get_userbyid(member) AS GrantedUserName
	,pg_get_userbyid(grantor) AS GrantorUserName
	,admin_option AS HasAdminOption
FROM pg_auth_members 
WHERE pg_get_userbyid(roleid) = 'User_Name';

SCRIPT TO FIND TABLE AND COLUMN WITHOUT COMMENT OR DESCRIPTION
===============================================================
Find Table without comment.====

SELECT 
	pg_get_userbyid(pc.relowner)AS ObjectOwner
	,pc.relname AS TableName
	,pd.description AS Comment
FROM pg_class AS pc
LEFT OUTER JOIN pg_description AS pd 
	ON (pc.oid = pd.objoid)
WHERE pg_get_userbyid(pc.relowner) ='User_Name'
	AND pc.relkind = 'r'
	AND pd.description IS NULL;
	
Find Column without comment.=====

SELECT 
	pg_get_userbyid(pc.relowner) AS ObjectOwner
	,pc.relname AS TableName
	,pa.attname AS ColumnName
	,pd.description AS Comment
FROM pg_attribute AS pa
JOIN pg_class AS pc 
	ON (pa.attrelid = pc.oid)
LEFT OUTER JOIN pg_description AS pd 
	ON (pc.oid = pd.objoid AND pa.attnum = pd.objsubid)
WHERE pg_get_userbyid(pc.relowner) ='User_Name'
	AND pc.relkind = 'r'
	AND pd.description IS NULL
	AND pa.attnum > 0
ORDER BY pa.attname;

SCRIPT TO FIND SESSIONS THAT ARE BLOCKING OTHER SESSIONS IN POSTGRESQL
========================================================================
SELECT 
	pl.pid as blocked_pid
	,psa.usename as blocked_user
	,pl2.pid as blocking_pid
	,psa2.usename as blocking_user
	,psa.query as blocked_statement
FROM pg_catalog.pg_locks pl
JOIN pg_catalog.pg_stat_activity psa
	ON pl.pid = psa.pid
JOIN pg_catalog.pg_locks pl2
JOIN pg_catalog.pg_stat_activity psa2
	ON pl2.pid = psa2.pid
	ON pl.transactionid = pl2.transactionid 
		AND pl.pid != pl2.pid
WHERE NOT pl.granted;

SCRIPT TO FIND ACTIVE SESSIONS OR CONNECTIONS IN POSTGRESQL
============================================================
SELECT 
	pid
	,datname
	,usename
	,application_name
	,client_hostname
	,client_port
	,backend_start
	,query_start
	,query	
FROM pg_stat_activity
WHERE state <> 'idle'
AND pid<>pg_backend_pid();

HOW TO FIND SIZE OF DATABASE AND TABLE IN POSTGRESQL
======================================================
Script 1 : Find a total size of the database.

SELECT pg_size_pretty(pg_database_size('db_employee'));
Script 2: Find a total size of the table with an index.

SELECT pg_size_pretty(pg_total_relation_size('Employee_Table'));
Script 3: Find a total size of the table without an index.

SELECT pg_size_pretty(pg_relation_size('Employee_table'));
Script 4: Find a total size of the index.

SELECT pg_size_pretty(pg_indexes_size('index_empid'));
Script 5: Find a total number of rows in a table.

SELECT COUNT(1) FROM Employee_table;

Script 6 : Find all the table size in the current database.
SELECT
    table_schema || '.' || table_name AS TableName,
    pg_size_pretty(pg_total_relation_size('"' || table_schema || '"."' || table_name || '"')) AS TableSize
FROM information_schema.tables
ORDER BY
    pg_total_relation_size('"' || table_schema || '"."' || table_name || '"') DESC
	
Script 7 : Find all the table and index size in the current database.
SELECT
    TableName
    ,pg_size_pretty(pg_table_size(TableName)) AS TableSize
    ,pg_size_pretty(pg_indexes_size(TableName)) AS IndexSize
    ,pg_size_pretty(pg_total_relation_size(TableName)) AS TotalSize
FROM 
(
     SELECT ('"' || table_schema || '"."' || table_name || '"') AS TableName
     FROM information_schema.tables
) AS Tables
ORDER BY 4 DESC


INSERT SCRIPT FOR ALL COUNTRIES
================================

CREATE TABLE tbl_Countries
(
     CountryID INT
    ,CountryName VARCHAR(50)
    ,TwoCharCountryCode CHAR(2)
    ,ThreeCharCountryCode CHAR(3)    
);
 
 
INSERT INTO tbl_Countries VALUES 
(1,'Afghanistan','AF','AFG')
,(2,'Aland Islands','AX','ALA')
,(3,'Albania','AL','ALB')
,(4,'Algeria','DZ','DZA')
,(5,'American Samoa','AS','ASM')
,(6,'Andorra','AD','AND')
,(7,'Angola','AO','AGO')
,(8,'Anguilla','AI','AIA')
,(9,'Antarctica','AQ','ATA')
,(10,'Antigua and Barbuda','AG','ATG')
,(11,'Argentina','AR','ARG')
,(12,'Armenia','AM','ARM')
,(13,'Aruba','AW','ABW')
,(14,'Australia','AU','AUS')
,(15,'Austria','AT','AUT')
,(16,'Azerbaijan','AZ','AZE')
,(17,'Bahamas','BS','BHS')
,(18,'Bahrain','BH','BHR')
,(19,'Bangladesh','BD','BGD')
,(20,'Barbados','BB','BRB')
,(21,'Belarus','BY','BLR')
,(22,'Belgium','BE','BEL')
,(23,'Belize','BZ','BLZ')
,(24,'Benin','BJ','BEN')
,(25,'Bermuda','BM','BMU')
,(26,'Bhutan','BT','BTN')
,(27,'Bolivia','BO','BOL')
,(28,'Bonaire, Sint Eustatius and Saba','BQ','BES')
,(29,'Bosnia and Herzegovina','BA','BIH')
,(30,'Botswana','BW','BWA')
,(31,'Bouvet Island','BV','BVT')
,(32,'Brazil','BR','BRA')
,(33,'British Indian Ocean Territory','IO','IOT')
,(34,'Brunei','BN','BRN')
,(35,'Bulgaria','BG','BGR')
,(36,'Burkina Faso','BF','BFA')
,(37,'Burundi','BI','BDI')
,(38,'Cambodia','KH','KHM')
,(39,'Cameroon','CM','CMR')
,(40,'Canada','CA','CAN')
,(41,'Cape Verde','CV','CPV')
,(42,'Cayman Islands','KY','CYM')
,(43,'Central African Republic','CF','CAF')
,(44,'Chad','TD','TCD')
,(45,'Chile','CL','CHL')
,(46,'China','CN','CHN')
,(47,'Christmas Island','CX','CXR')
,(48,'Cocos (Keeling) Islands','CC','CCK')
,(49,'Colombia','CO','COL')
,(50,'Comoros','KM','COM')
,(51,'Congo','CG','COG')
,(52,'Cook Islands','CK','COK')
,(53,'Costa Rica','CR','CRI')
,(54,'Ivory Coast','CI','CIV')
,(55,'Croatia','HR','HRV')
,(56,'Cuba','CU','CUB')
,(57,'Curacao','CW','CUW')
,(58,'Cyprus','CY','CYP')
,(59,'Czech Republic','CZ','CZE')
,(60,'Democratic Republic of the Congo','CD','COD')
,(61,'Denmark','DK','DNK')
,(62,'Djibouti','DJ','DJI')
,(63,'Dominica','DM','DMA')
,(64,'Dominican Republic','DO','DOM')
,(65,'Ecuador','EC','ECU')
,(66,'Egypt','EG','EGY')
,(67,'El Salvador','SV','SLV')
,(68,'Equatorial Guinea','GQ','GNQ')
,(69,'Eritrea','ER','ERI')
,(70,'Estonia','EE','EST')
,(71,'Ethiopia','ET','ETH')
,(72,'Falkland Islands (Malvinas)','FK','FLK')
,(73,'Faroe Islands','FO','FRO')
,(74,'Fiji','FJ','FJI')
,(75,'Finland','FI','FIN')
,(76,'France','FR','FRA')
,(77,'French Guiana','GF','GUF')
,(78,'French Polynesia','PF','PYF')
,(79,'French Southern Territories','TF','ATF')
,(80,'Gabon','GA','GAB')
,(81,'Gambia','GM','GMB')
,(82,'Georgia','GE','GEO')
,(83,'Germany','DE','DEU')
,(84,'Ghana','GH','GHA')
,(85,'Gibraltar','GI','GIB')
,(86,'Greece','GR','GRC')
,(87,'Greenland','GL','GRL')
,(88,'Grenada','GD','GRD')
,(89,'Guadaloupe','GP','GLP')
,(90,'Guam','GU','GUM')
,(91,'Guatemala','GT','GTM')
,(92,'Guernsey','GG','GGY')
,(93,'Guinea','GN','GIN')
,(94,'Guinea-Bissau','GW','GNB')
,(95,'Guyana','GY','GUY')
,(96,'Haiti','HT','HTI')
,(97,'Heard Island and McDonald Islands','HM','HMD')
,(98,'Honduras','HN','HND')
,(99,'Hong Kong','HK','HKG')
,(100,'Hungary','HU','HUN')
,(101,'Iceland','IS','ISL')
,(102,'India','IN','IND')
,(103,'Indonesia','ID','IDN')
,(104,'Iran','IR','IRN')
,(105,'Iraq','IQ','IRQ')
,(106,'Ireland','IE','IRL')
,(107,'Isle of Man','IM','IMN')
,(108,'Israel','IL','ISR')
,(109,'Italy','IT','ITA')
,(110,'Jamaica','JM','JAM')
,(111,'Japan','JP','JPN')
,(112,'Jersey','JE','JEY')
,(113,'Jordan','JO','JOR')
,(114,'Kazakhstan','KZ','KAZ')
,(115,'Kenya','KE','KEN')
,(116,'Kiribati','KI','KIR')
,(117,'Kosovo','XK','---')
,(118,'Kuwait','KW','KWT')
,(119,'Kyrgyzstan','KG','KGZ')
,(120,'Laos','LA','LAO')
,(121,'Latvia','LV','LVA')
,(122,'Lebanon','LB','LBN')
,(123,'Lesotho','LS','LSO')
,(124,'Liberia','LR','LBR')
,(125,'Libya','LY','LBY')
,(126,'Liechtenstein','LI','LIE')
,(127,'Lithuania','LT','LTU')
,(128,'Luxembourg','LU','LUX')
,(129,'Macao','MO','MAC')
,(130,'Macedonia','MK','MKD')
,(131,'Madagascar','MG','MDG')
,(132,'Malawi','MW','MWI')
,(133,'Malaysia','MY','MYS')
,(134,'Maldives','MV','MDV')
,(135,'Mali','ML','MLI')
,(136,'Malta','MT','MLT')
,(137,'Marshall Islands','MH','MHL')
,(138,'Martinique','MQ','MTQ')
,(139,'Mauritania','MR','MRT')
,(140,'Mauritius','MU','MUS')
,(141,'Mayotte','YT','MYT')
,(142,'Mexico','MX','MEX')
,(143,'Micronesia','FM','FSM')
,(144,'Moldava','MD','MDA')
,(145,'Monaco','MC','MCO')
,(146,'Mongolia','MN','MNG')
,(147,'Montenegro','ME','MNE')
,(148,'Montserrat','MS','MSR')
,(149,'Morocco','MA','MAR')
,(150,'Mozambique','MZ','MOZ')
,(151,'Myanmar (Burma)','MM','MMR')
,(152,'Namibia','NA','NAM')
,(153,'Nauru','NR','NRU')
,(154,'Nepal','NP','NPL')
,(155,'Netherlands','NL','NLD')
,(156,'New Caledonia','NC','NCL')
,(157,'New Zealand','NZ','NZL')
,(158,'Nicaragua','NI','NIC')
,(159,'Niger','NE','NER')
,(160,'Nigeria','NG','NGA')
,(161,'Niue','NU','NIU')
,(162,'Norfolk Island','NF','NFK')
,(163,'North Korea','KP','PRK')
,(164,'Northern Mariana Islands','MP','MNP')
,(165,'Norway','NO','NOR')
,(166,'Oman','OM','OMN')
,(167,'Pakistan','PK','PAK')
,(168,'Palau','PW','PLW')
,(169,'Palestine','PS','PSE')
,(170,'Panama','PA','PAN')
,(171,'Papua New Guinea','PG','PNG')
,(172,'Paraguay','PY','PRY')
,(173,'Peru','PE','PER')
,(174,'Phillipines','PH','PHL')
,(175,'Pitcairn','PN','PCN')
,(176,'Poland','PL','POL')
,(177,'Portugal','PT','PRT')
,(178,'Puerto Rico','PR','PRI')
,(179,'Qatar','QA','QAT')
,(180,'Reunion','RE','REU')
,(181,'Romania','RO','ROU')
,(182,'Russia','RU','RUS')
,(183,'Rwanda','RW','RWA')
,(184,'Saint Barthelemy','BL','BLM')
,(185,'Saint Helena','SH','SHN')
,(186,'Saint Kitts and Nevis','KN','KNA')
,(187,'Saint Lucia','LC','LCA')
,(188,'Saint Martin','MF','MAF')
,(189,'Saint Pierre and Miquelon','PM','SPM')
,(190,'Saint Vincent and the Grenadines','VC','VCT')
,(191,'Samoa','WS','WSM')
,(192,'San Marino','SM','SMR')
,(193,'Sao Tome and Principe','ST','STP')
,(194,'Saudi Arabia','SA','SAU')
,(195,'Senegal','SN','SEN')
,(196,'Serbia','RS','SRB')
,(197,'Seychelles','SC','SYC')
,(198,'Sierra Leone','SL','SLE')
,(199,'Singapore','SG','SGP')
,(200,'Sint Maarten','SX','SXM')
,(201,'Slovakia','SK','SVK')
,(202,'Slovenia','SI','SVN')
,(203,'Solomon Islands','SB','SLB')
,(204,'Somalia','SO','SOM')
,(205,'South Africa','ZA','ZAF')
,(206,'South Georgia and the South Sandwich Islands','GS','SGS')
,(207,'South Korea','KR','KOR')
,(208,'South Sudan','SS','SSD')
,(209,'Spain','ES','ESP')
,(210,'Sri Lanka','LK','LKA')
,(211,'Sudan','SD','SDN')
,(212,'Suriname','SR','SUR')
,(213,'Svalbard and Jan Mayen','SJ','SJM')
,(214,'Swaziland','SZ','SWZ')
,(215,'Sweden','SE','SWE')
,(216,'Switzerland','CH','CHE')
,(217,'Syria','SY','SYR')
,(218,'Taiwan','TW','TWN')
,(219,'Tajikistan','TJ','TJK')
,(220,'Tanzania','TZ','TZA')
,(221,'Thailand','TH','THA')
,(222,'Timor-Leste (East Timor)','TL','TLS')
,(223,'Togo','TG','TGO')
,(224,'Tokelau','TK','TKL')
,(225,'Tonga','TO','TON')
,(226,'Trinidad and Tobago','TT','TTO')
,(227,'Tunisia','TN','TUN')
,(228,'Turkey','TR','TUR')
,(229,'Turkmenistan','TM','TKM')
,(230,'Turks and Caicos Islands','TC','TCA')
,(231,'Tuvalu','TV','TUV')
,(232,'Uganda','UG','UGA')
,(233,'Ukraine','UA','UKR')
,(234,'United Arab Emirates','AE','ARE')
,(235,'United Kingdom','GB','GBR')
,(236,'United States','US','USA')
,(237,'United States Minor Outlying Islands','UM','UMI')
,(238,'Uruguay','UY','URY')
,(239,'Uzbekistan','UZ','UZB')
,(240,'Vanuatu','VU','VUT')
,(241,'Vatican City','VA','VAT')
,(242,'Venezuela','VE','VEN')
,(243,'Vietnam','VN','VNM')
,(244,'Virgin Islands, British','VG','VGB')
,(245,'Virgin Islands, US','VI','VIR')
,(246,'Wallis and Futuna','WF','WLF')
,(247,'Western Sahara','EH','ESH')
,(248,'Yemen','YE','YEM')
,(249,'Zambia','ZM','ZMB')
,(250,'Zimbabwe','ZW','ZWE');

